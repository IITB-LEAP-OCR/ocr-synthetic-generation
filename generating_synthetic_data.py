# -*- coding: utf-8 -*-
"""Generating_Synthetic_Data.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Fey_wWGu_l3zguurX6YnO55b2dVHxPUQ

### Prerequisites
* An Empty Image Folder : "image_data"
* An Empty Text Folder : "text_data"
* A Folder Containing Raw Data : "raw_text_data"
* A Folder Containing Fonts : "fonts"

### Necessary Imports
"""

import glob
import os
import random
import re
import math
import numpy as np
from PIL import Image, ImageDraw, ImageFont

"""#### Base Path"""

path = '/Users/poojaaryamane/Desktop/iitb-main/synthetic_generator'

os.chdir(path)
os.getcwd()

"""#### Function For Generating Synthetic Data White"""

def synthetic_data_white(xli,fontype,tename,line,path):
    os.chdir("{}/image_data".format(path))
    font = random.choice(fontype)
    img = Image.new('RGB', (100, 20), color = (255, 255, 255))
    fnt = ImageFont.truetype("{}/fonts/{}.ttf".format(path,font), 15)
    d = ImageDraw.Draw(img)
    size_width, size_height = d.textsize(line, font=fnt)
    d.text((size_width, size_height), line, font=fnt, fill=(255, 255, 0))
    img1 = Image.new('RGB', (size_width, size_height), color = (255, 255, 255))
    d1 = ImageDraw.Draw(img1)
    d1.text((0,0), line, font=fnt, fill=(0, 0, 0))
    img1.save("{}_{}_box_{}.png".format(font,tename,xli))
    return "{}_{}_box_{}.png".format(font,tename,xli)

"""#### Function For Generating Synthetic Data Color"""

def synthetic_data_color(xli,fontype,tename,line,path,color):
    os.chdir("{}/image_data".format(path))
    font = random.choice(fontype)
    img = Image.new('RGB', (100, 20), color = (255, 255, 255))
    fnt = ImageFont.truetype("{}/fonts/{}.ttf".format(path,font), 15)
    d = ImageDraw.Draw(img)
    size_width, size_height = d.textsize(line, font=fnt)
    d.text((size_width, size_height), line, font=fnt, fill=(255, 255, 0))
    rc = random.choice(color)
    img1 = Image.new('RGB', (size_width, size_height), color = rc)
    d1 = ImageDraw.Draw(img1)
    d1.text((0,0), line, font=fnt, fill=(0, 0, 0))
    img1.save("{}_{}_box_{}.png".format(font,tename,xli))
    return "{}_{}_box_{}.png".format(font,tename,xli)

"""#### Function For Generating Synthetic Text"""

def synthetic_text(xli,tename,line,path,image_file):
    os.chdir("{}/text_data".format(path))
    stf = open("{}.txt".format(tename), "a" ,encoding='utf8')
    stf.write('synthetic_generated/image_data/'+image_file+' '+line+"\n")
    stf.close()
    os.chdir("{}/raw_text_data".format(path))

"""#### Creating A List Of Available Random Fonts"""

os.chdir("{}/fonts".format(path))
foname = []
fontype = []
for xfo,font in enumerate(glob.glob("*.ttf")):
    foname.append(font.split(".")[0])
print(foname,"\n")
for i in range(30):
    fontype.append(random.choice(foname))
print(fontype)

"""#### Function For Refining Text Lines"""

def refine_text_line(line):
    regex = re.compile('[%*+-/<=>^|~#Â°]')
    if (regex.search(line) == None):
        return True
    else:
        return False

"""#### Color Codes For Old Paper"""

color = [(255, 173, 1),(255, 254, 113),(255, 228, 181),(255, 255, 102),(248, 222, 126),(254, 220, 86),(255, 227,  110),(255, 253, 116),(226, 202, 118),(238, 234, 98),(248, 228, 115),(240, 230, 140),(238, 232, 170),(238, 220, 130)]

def difference (list1, list2):
    list_dif = [i for i in list1 + list2 if i not in list1 or i not in list2]
    return list_dif

"""#### Base Script To Call The Function"""

os.chdir("{}/raw_text_data".format(path))
for xte,file in enumerate(glob.glob("*.txt")):
    c2=0
    c1=0
    os.chdir("{}/raw_text_data".format(path))
    with open(file, 'r' , encoding="utf8") as f:
        tename = file.split(".")[0]
        # checkpoint
        print(tename,"\n")
        all_lines = []
        for xli,line in enumerate(f):
            all_lines.append(line)
            no_of_lines = xli + 1
        all_lines = list(map(lambda x:x.strip(),all_lines)) #removes /n
#         print(all_lines)
#         print(no_of_lines)
        x = math.floor(0.98 * no_of_lines)
        whi_lines = random.sample(all_lines,x)
        col_lines = difference(all_lines,whi_lines)
        print(whi_lines)
        print(col_lines)
#         print(x) #98% of white data in no.s

#        for wh_i,wh_line in enumerate(whi_lines):
#            if (refine_text_line(wh_line) == True):
##                 print(wh_line)
#                try:
#                    image_file = synthetic_data_white(xli,fontype,tename,wh_line,path)
#                    synthetic_text(xli,tename,wh_line,path,image_file)
#                except:
#                    c1+=1
#            else:
#                print("--------------------------------------------------------------")
#                print(wh_line)
#        for co_i,co_line in enumerate(col_lines):
#            if (refine_text_line(co_line) == True):
#                print(co_line)
#                try:
#                    image_file = synthetic_data_color(xli,fontype,tename,co_line,path,color)
#                    synthetic_text(xli,tename,co_line,path,image_file)
#                except:
#                    c2+=1
#            else:
#                print("--------------------------------------------------------------")
#                print(co_line)


print(c1)
print(c2)
